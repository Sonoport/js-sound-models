{
    "project": {
        "name": "Sonoport Javascript Sound Models",
        "description": "Sonoport Javascript Sound Models",
        "version": "1.0.0",
        "url": "",
        "logo": "http://sonoport.com/img/Logo.png"
    },
    "files": {
        "src/lib/models/Activity.js": {
            "name": "src/lib/models/Activity.js",
            "modules": {
                "Models": 1
            },
            "classes": {
                "Activity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/models/Extender.js": {
            "name": "src/lib/models/Extender.js",
            "modules": {},
            "classes": {
                "Extender": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/models/Looper.js": {
            "name": "src/lib/models/Looper.js",
            "modules": {},
            "classes": {
                "Looper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/models/MultiTrigger.js": {
            "name": "src/lib/models/MultiTrigger.js",
            "modules": {},
            "classes": {
                "MultiTrigger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/models/Scrubber.js": {
            "name": "src/lib/models/Scrubber.js",
            "modules": {},
            "classes": {
                "Scrubber": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/models/Trigger.js": {
            "name": "src/lib/models/Trigger.js",
            "modules": {},
            "classes": {
                "Trigger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/temp/BaseSound.js": {
            "name": "src/lib/temp/BaseSound.js",
            "modules": {},
            "classes": {
                "BaseSound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/temp/Envelope.js": {
            "name": "src/lib/temp/Envelope.js",
            "modules": {
                "Core": 1
            },
            "classes": {
                "Envelope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lib/temp/SPAudioParam.js": {
            "name": "src/lib/temp/SPAudioParam.js",
            "modules": {},
            "classes": {
                "SPAudioParam": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Models": {
            "name": "Models",
            "submodules": {},
            "classes": {
                "Activity": 1,
                "Extender": 1,
                "Looper": 1,
                "MultiTrigger": 1,
                "Scrubber": 1,
                "Trigger": 1,
                "BaseSound": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/lib/temp/BaseSound.js",
            "line": 8
        },
        "Core": {
            "name": "Core",
            "submodules": {},
            "classes": {
                "Envelope": 1,
                "SPAudioParam": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 8
        }
    },
    "classes": {
        "Activity": {
            "name": "Activity",
            "shortname": "Activity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/models/Activity.js",
            "line": 8,
            "description": "A sound model which triggers a single or multiple sound files with multiple voices (polyphony).",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "sound",
                    "description": "Either URL or AudioBuffer or File of sound.",
                    "type": "String/AudioBuffer/File"
                },
                {
                    "name": "context",
                    "description": "AudioContext to be used.",
                    "type": "AudioContext"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when the sound has finished loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onProgressCallback",
                    "description": "Callback when the audio file is being downloaded.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Extender": {
            "name": "Extender",
            "shortname": "Extender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/models/Extender.js",
            "line": 8,
            "description": "A sound model which extends the playing of a single sound infinitely with windowed overlapping.",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "sound",
                    "description": "Single URL or AudioBuffer or File of sound.",
                    "type": "String/AudioBuffer/File"
                },
                {
                    "name": "context",
                    "description": "AudioContext to be used.",
                    "type": "AudioContext"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when the sound has finished loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onProgressCallback",
                    "description": "Callback when the audio file is being downloaded.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Looper": {
            "name": "Looper",
            "shortname": "Looper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/models/Looper.js",
            "line": 8,
            "description": "A sound model which loads a sound file and allows it to be looped continuously at variable speed.",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers or File of sounds.",
                    "type": "Array/String/AudioBuffer/File"
                },
                {
                    "name": "context",
                    "description": "AudioContext to be used.",
                    "type": "AudioContext"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onProgressCallback",
                    "description": "Callback when the audio file is being downloaded.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onEndedCallback",
                    "description": "Callback when the Looper has finished playing.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "MultiTrigger": {
            "name": "MultiTrigger",
            "shortname": "MultiTrigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/models/MultiTrigger.js",
            "line": 8,
            "description": "A sound model which triggers a single or multiple sound files with multiple voices (polyphony)\nrepeatedly.",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers or File of sounds.",
                    "type": "Array/String/AudioBuffer/File"
                },
                {
                    "name": "context",
                    "description": "AudioContext to be used.",
                    "type": "AudioContext"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onProgressCallback",
                    "description": "Callback when the audio file is being downloaded.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Scrubber": {
            "name": "Scrubber",
            "shortname": "Scrubber",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/models/Scrubber.js",
            "line": 7,
            "description": "A sound model which loads a sound file and allows it to be scrubbed using a position parameter",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers or File of sounds.",
                    "type": "Array/String/AudioBuffer/File"
                },
                {
                    "name": "context",
                    "description": "AudioContext to be used.",
                    "type": "AudioContext"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onProgressCallback",
                    "description": "Callback when the audio file is being downloaded.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "Trigger": {
            "name": "Trigger",
            "shortname": "Trigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/models/Trigger.js",
            "line": 8,
            "description": "A sound model which triggers a single or multiple sound files with multiple voices (polyphony).",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers or File of sounds.",
                    "type": "Array/String/AudioBuffer/File"
                },
                {
                    "name": "context",
                    "description": "AudioContext to be used.",
                    "type": "AudioContext"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onProgressCallback",
                    "description": "Callback when the audio file is being downloaded.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onEndedCallback",
                    "description": "Callback when the Trigger has finished playing.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "BaseSound": {
            "name": "BaseSound",
            "shortname": "BaseSound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Models",
            "namespace": "",
            "file": "src/lib/temp/BaseSound.js",
            "line": 8,
            "description": "Pseudo AudioNode class the encapsulates basic functionality of an Audio Node. To be extended by all other Sound Models",
            "is_constructor": 1,
            "requires": [
                "AudioContextMonkeyPatch"
            ],
            "params": [
                {
                    "name": "context",
                    "description": "AudioContext in which this Sound is defined.",
                    "type": "AudioContext",
                    "optional": true
                }
            ]
        },
        "Envelope": {
            "name": "Envelope",
            "shortname": "Envelope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/lib/temp/Envelope.js",
            "line": 7,
            "description": "Implements an ASDR Envelope.",
            "is_constructor": 1,
            "extends": "BaseSound",
            "params": [
                {
                    "name": "context",
                    "description": "AudioContext in which this Sound is defined.",
                    "type": "AudioContext"
                }
            ]
        },
        "SPAudioParam": {
            "name": "SPAudioParam",
            "shortname": "SPAudioParam",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Core",
            "namespace": "",
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 8,
            "description": "Mock AudioParam used to create Parameters for Sonoport Sound Models. The SPAudioParam supports either a AudioParam backed parameter, or a completely Javascript mocked up Parameter, which supports a rough version of parameter automation.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "minValue",
                    "description": "The minimum value of the parameter.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "maxValue",
                    "description": "The maximum value of the parameter.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "defaultValue",
                    "description": "The default and starting value of the parameter.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "aParams",
                    "description": "A WebAudio parameter which will be set/get when this parameter is changed.",
                    "type": "AudioParam/Array",
                    "optional": true
                },
                {
                    "name": "mappingFunction",
                    "description": "A mapping function to map values between the mapped SPAudioParam and the underlying WebAudio AudioParam.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "setter",
                    "description": "A setter function which can be used to set the underlying audioParam. If this function is undefined, then the parameter is set directly.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "audioContext",
                    "description": "A WebAudio AudioContext for timing.",
                    "type": "AudioContext",
                    "optional": true
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "src/lib/models/Activity.js",
            "line": 154,
            "description": "Pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "maxRate",
            "type": "SPAudioParam",
            "default": "1",
            "minvalue": "0.05",
            "maxvalue": "8.0",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 165,
            "description": "Pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "action",
            "type": "SPAudioParam",
            "default": "0",
            "minvalue": "0.0",
            "maxvalue": "1.0",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 176,
            "description": "Maximum value for random pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "sensitivity",
            "type": "SPAudioParam",
            "default": "0.5",
            "minvalue": "0.0",
            "maxvalue": "1.0",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 187,
            "description": "Rise time (time-constant value of first-order filter (exponential) ) to approach the target speed set by the {{#crossLink \"Activity/action:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "riseTime",
            "type": "SPAudioParam",
            "default": "1",
            "minvalue": "0.05",
            "maxvalue": "10.0",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 198,
            "description": "Decay time (time-constant value of first-order filter (exponential) ) to approach the target speed set by the {{#crossLink \"Activity/action:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "decayTime",
            "type": "SPAudioParam",
            "default": "1",
            "minvalue": "0.05",
            "maxvalue": "10.0",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 209,
            "description": "Start point (as a factor of the length of the entire track) where the Looping should start from.",
            "itemtype": "property",
            "name": "startPoint",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "0.0",
            "maxvalue": "0.99",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 222,
            "description": "Reinitializes a Activity and sets it's sources.",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sound",
                    "description": "Single or Array of either URLs or AudioBuffers of sound.",
                    "type": "Array/AudioBuffer/String/File"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sound have finished loading.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 235,
            "description": "Enable playback.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "when",
                    "description": "At what time (in seconds) the sound be triggered",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 247,
            "description": "Start playing after specific time and from a specific offset. If offset is not defined,\nthe value of startPoint property is used.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "when",
                    "description": "The delay in seconds before playing the sound",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting position of the playhead",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "duration",
                    "description": "Duration of the portion (in seconds) to be played",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 261,
            "description": "Stops the sound and resets play head to 0.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "when",
                    "description": "Time offset to stop",
                    "type": "Number"
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 271,
            "description": "Pause the currently playing sound at the current position.",
            "itemtype": "method",
            "name": "pause",
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 281,
            "description": "Linearly ramp down the gain of the audio in time (seconds) to 0.",
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "when",
                    "description": "Time (in seconds) at which the Envelope will release.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "fadeTime",
                    "description": "Amount of time (seconds) it takes for linear ramp down to happen.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 293,
            "description": "Disconnects the Sound from the AudioNode Chain.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "outputIndex",
                    "description": "Index describing which output of the AudioNode to disconnect.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Activity.js",
            "line": 303,
            "description": "If the parameter `output` is an AudioNode, it connects to the releaseGainNode.\nIf the output is a BaseSound, it will connect BaseSound's releaseGainNode to the output's inputNode.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "destination",
                    "description": "AudioNode to connect to.",
                    "type": "AudioNode"
                },
                {
                    "name": "output",
                    "description": "Index describing which output of the AudioNode from which to connect.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "input",
                    "description": "Index describing which input of the destination AudioNode to connect to.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Activity",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 138,
            "description": "Pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "pitchShift",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "-60.0",
            "maxvalue": "60.0",
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 149,
            "description": "Maximum value for random pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "eventPeriod",
            "type": "SPAudioParam",
            "default": "2.0",
            "minvalue": "0.1",
            "maxvalue": "10.0",
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 160,
            "description": "Enable randomness in the order of sources which are triggered.",
            "itemtype": "property",
            "name": "crossFadeDuration",
            "type": "SPAudioParam",
            "default": "0.5",
            "minvalue": "0.1",
            "maxvalue": "0.99",
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 173,
            "description": "Reinitializes a Extender and sets it's sources.",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sound",
                    "description": "Single or Array of either URLs or AudioBuffers of sound.",
                    "type": "Array/AudioBuffer/String/File"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sound have finished loading.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 186,
            "description": "Starts playing the sound",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "when",
                    "description": "At what time (in seconds) the sound be triggered",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 198,
            "description": "Plays the sound immediately",
            "itemtype": "method",
            "name": "play",
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 208,
            "description": "Pauses the sound immediately",
            "itemtype": "method",
            "name": "pause",
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Extender.js",
            "line": 219,
            "description": "Stops playing the sound.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "when",
                    "description": "At what time (in seconds) the sound be stopped",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Extender",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 146,
            "description": "Changes the speed of playback of the audio source.",
            "itemtype": "property",
            "name": "playSpeed",
            "type": "SPAudioParam",
            "default": "1.0",
            "minvalue": "0.0",
            "maxvalue": "10.0",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 157,
            "description": "Rise time (time-constant value of first-order filter (exponential) ) to approach the target speed set by the {{#crossLink \"Looper/playSpeed:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "riseTime",
            "type": "SPAudioParam",
            "default": "1.0",
            "minvalue": "0.05",
            "maxvalue": "10.0",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 168,
            "description": "Decay time (time-constant value of first-order filter (exponential) ) to approach the target speed set by the {{#crossLink \"Looper/playSpeed:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "decayTime",
            "type": "SPAudioParam",
            "default": "1.0",
            "minvalue": "0.05",
            "maxvalue": "10.0",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 179,
            "description": "Start point (as a factor of the length of the entire track) where the Looping should start from.",
            "itemtype": "property",
            "name": "startPoint",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "0.0",
            "maxvalue": "0.99",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 190,
            "description": "An array of Gain Parameters for setting the volume of the individual tracks loaded into the looper. Works even with a single track loaded.",
            "itemtype": "property",
            "name": "multiTrackGain",
            "type": "Array of SPAudioParams",
            "default": "1.0",
            "minvalue": "0.0",
            "maxvalue": "1.0",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 202,
            "description": "The max number of Loops the Looper will complete before stopping. Current only supports -1 (loop indefinitely), and 1 (only play the track once, ie. no looping).",
            "itemtype": "property",
            "name": "maxLoops",
            "type": "SPAudioParam",
            "default": "-1 (Infinite)",
            "minvalue": "-1 (Infinite)",
            "maxvalue": "1",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 213,
            "description": "Reinitializes a Looper and sets it's sources.",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers of sounds.",
                    "type": "Array/AudioBuffer/String/File"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 226,
            "description": "Plays the sound immediately. If the sound is paused, the sound will be played back from the same position as it was paused at.",
            "itemtype": "method",
            "name": "play",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 246,
            "description": "Start playing after specific time and from a specific offset. If offset is not defined,\nthe value of startPoint property is used.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "when",
                    "description": "The delay in seconds before playing the sound",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting position of the playhead",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "duration",
                    "description": "Duration of the portion (in seconds) to be played",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "attackDuration",
                    "description": "Duration (in seconds) of attack ramp of the envelope.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 283,
            "description": "Stops the sound and resets play head to 0.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "when",
                    "description": "Time offset to stop",
                    "type": "Number"
                }
            ],
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Looper.js",
            "line": 299,
            "description": "Pause the currently playing sound at the current position.",
            "itemtype": "method",
            "name": "pause",
            "class": "Looper",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 150,
            "description": "Pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "pitchShift",
            "type": "SPAudioParam",
            "default": "0",
            "minvalue": "-60.0",
            "maxvalue": "60.0",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 161,
            "description": "Maximum value for random pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "pitchRand",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "0.0",
            "maxvalue": "24.0",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 172,
            "description": "Enable randomness in the order of sources which are triggered.",
            "itemtype": "property",
            "name": "eventRand",
            "type": "SPAudioParam",
            "default": "false",
            "minvalue": "true",
            "maxvalue": "false",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 183,
            "description": "Trigger rate for playing the source in Hz.",
            "itemtype": "property",
            "name": "eventRate",
            "type": "SPAudioParam",
            "default": "10.0",
            "minvalue": "0.0",
            "maxvalue": "60.0",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 193,
            "description": "Maximum deviance from the regular trigger interval for a random jitter factor in percentage.",
            "itemtype": "property",
            "name": "eventJitter",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "0.0",
            "maxvalue": "0.99",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 206,
            "description": "Start repeated triggering.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "when",
                    "description": "At what time (in seconds) the sound be triggered",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 218,
            "description": "Start repeated triggering immediately",
            "itemtype": "method",
            "name": "play",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 228,
            "description": "Stops playing all voices.",
            "itemtype": "method",
            "name": "stop",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 239,
            "description": "Pauses playing all voices.",
            "itemtype": "method",
            "name": "pause",
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/MultiTrigger.js",
            "line": 250,
            "description": "Reinitializes a MultiTrigger and sets it's sources.",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers of sounds.",
                    "type": "Array/AudioBuffer/String/File"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "MultiTrigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Scrubber.js",
            "line": 272,
            "description": "Reinitializes a Scrubber and sets it's sources.",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers of sounds.",
                    "type": "Array/AudioBuffer/String/File"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Scrubber",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Scrubber.js",
            "line": 287,
            "description": "Position of the audio to be played.",
            "itemtype": "property",
            "name": "playPosition",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "0.0",
            "maxvalue": "1.0",
            "class": "Scrubber",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Scrubber.js",
            "line": 298,
            "description": "Sets if the audio should fade out when playPosition has not changed for a while.",
            "itemtype": "property",
            "name": "noMotionFade",
            "type": "SPAudioParam",
            "default": "false",
            "minvalue": "true",
            "maxvalue": "false",
            "class": "Scrubber",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Scrubber.js",
            "line": 309,
            "description": "Sets if moving playPosition to backwards should make any sound.",
            "itemtype": "property",
            "name": "muteOnReverse",
            "type": "SPAudioParam",
            "default": "false",
            "minvalue": "true",
            "maxvalue": "false",
            "class": "Scrubber",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 64,
            "description": "Pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "pitchShift",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "-60",
            "maxvalue": "60",
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 75,
            "description": "Maximum value for random pitch shift of the triggered voices in semitones.",
            "itemtype": "property",
            "name": "pitchRand",
            "type": "SPAudioParam",
            "default": "0.0",
            "minvalue": "0.0",
            "maxvalue": "24",
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 86,
            "description": "Enable randomness in the order of sources which are triggered.",
            "itemtype": "property",
            "name": "eventRand",
            "type": "SPAudioParam",
            "default": "false",
            "minvalue": "true",
            "maxvalue": "false",
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 99,
            "description": "Reinitializes a Trigger and sets it's sources.",
            "itemtype": "method",
            "name": "setSources",
            "params": [
                {
                    "name": "sounds",
                    "description": "Single or Array of either URLs or AudioBuffers of sounds.",
                    "type": "Array/AudioBuffer/String/File"
                },
                {
                    "name": "onLoadCallback",
                    "description": "Callback when all sounds have finished loading.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 112,
            "description": "Stops playing all voices.",
            "itemtype": "method",
            "name": "stop",
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 122,
            "description": "Pauses playing all voices.",
            "itemtype": "method",
            "name": "pause",
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 132,
            "description": "Triggers a single voice immediately.",
            "itemtype": "method",
            "name": "play",
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/models/Trigger.js",
            "line": 142,
            "description": "Triggers a single voice at the given time",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "when",
                    "description": "At what time (in seconds) the sound be triggered",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Trigger",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 1,
            "description": "/**\n * @module Core",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 17,
            "description": "Web Audio API's AudioContext. If the context passed to the constructor is an AudioContext, a new one is created here.",
            "itemtype": "property",
            "name": "audioContext",
            "type": "AudioContext",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 30,
            "description": "Number of inputs",
            "itemtype": "property",
            "name": "numberOfInputs",
            "type": "Number",
            "default": "1",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 39,
            "description": "Number of outputs",
            "itemtype": "property",
            "name": "numberOfOutputs",
            "type": "Number",
            "default": "1",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 48,
            "description": "Number of sources that can be given to this Sound",
            "itemtype": "property",
            "name": "numberOfInputs",
            "type": "Number",
            "default": "0",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 57,
            "description": "Release Gain Node",
            "itemtype": "property",
            "name": "releaseGainNode",
            "type": "GainNode",
            "default": "Internal GainNode",
            "final": 1,
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 67,
            "description": "If Sound is currently playing.",
            "itemtype": "property",
            "name": "isPlaying",
            "type": "Boolean",
            "default": "false",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 76,
            "description": "If Sound is currently initialized.",
            "itemtype": "property",
            "name": "isInitialized",
            "type": "Boolean",
            "default": "false",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 85,
            "description": "The input node that the output node will be connected to. <br />\nSet this value to null if no connection can be made on the input node",
            "itemtype": "property",
            "name": "inputNode",
            "type": "Object",
            "default": "null",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 95,
            "description": "String name of the model.",
            "itemtype": "property",
            "name": "modelName",
            "type": "String",
            "default": "\"Model\"",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 107,
            "description": "If the parameter `output` is an AudioNode, it connects to the releaseGainNode.\nIf the output is a BaseSound, it will connect BaseSound's releaseGainNode to the output's inputNode.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "destination",
                    "description": "AudioNode to connect to.",
                    "type": "AudioNode"
                },
                {
                    "name": "output",
                    "description": "Index describing which output of the AudioNode from which to connect.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "input",
                    "description": "Index describing which input of the destination AudioNode to connect to.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 132,
            "description": "Disconnects the Sound from the AudioNode Chain.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "outputIndex",
                    "description": "Index describing which output of the AudioNode to disconnect.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 142,
            "description": "Start the AudioNode. Abstract method. Override this method when a Node is defined.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "when",
                    "description": "At what time (in seconds) the sound should start playing.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "offset",
                    "description": "Offset time in the buffer (in seconds) where playback will begin.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "duration",
                    "description": "Duration of the portion (in seconds) to be played.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 154,
            "description": "Stop the AudioNode. Abstract method. Override this method when a Node is defined.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "when",
                    "description": "Time (in seconds) the sound should stop playing",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 170,
            "description": "Linearly ramp down the gain of the audio in time (seconds) to 0.",
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "when",
                    "description": "Time (in seconds) at which the Envelope will release.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "fadeTime",
                    "description": "Amount of time (seconds) it takes for linear ramp down to happen.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 199,
            "description": "Play sound. Abstract method. Override this method when a Node is defined.",
            "itemtype": "method",
            "name": "play",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 208,
            "description": "Pause sound. Abstract method. Override this method when a Node is defined.",
            "itemtype": "method",
            "name": "pause",
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/BaseSound.js",
            "line": 217,
            "description": "List all SPAudioParams this Sound exposes",
            "itemtype": "method",
            "name": "listParams",
            "params": [
                {
                    "name": "paramArray",
                    "description": "Array of all the SPAudioParams this Sound exposes.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "class": "BaseSound",
            "module": "Models"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 33,
            "description": "The input node that the output node will be connected to.",
            "itemtype": "property",
            "name": "inputNode",
            "type": "Object",
            "default": "Internal Release-GainNode",
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 57,
            "description": "Start the Envelope.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "when",
                    "description": "Time (in seconds) at which the Envelope will start.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 89,
            "description": "Stop the Envelope.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "when",
                    "description": "Time (in seconds) at which the Envelope will stop.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 104,
            "description": "Connect to release Gain Node.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "destination",
                    "description": "AudioNode to connect to.",
                    "type": "AudioNode"
                },
                {
                    "name": "output",
                    "description": "Index describing which output of the AudioNode from which to connect.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "input",
                    "description": "Index describing which input of the destination AudioNode to connect to.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 116,
            "description": "Disconnect from release Gain Node.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "outputIndex",
                    "description": "Index describing which output of the AudioNode to disconnect.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 126,
            "description": "Linearly ramps down the gain of releaseGainNode from current value to 0 in fadeTime (s). It is better to call this method on a user initiated event or after some time (in seconds) has passed.",
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "fadeTime",
                    "description": "Amount of time (seconds) taken to release or fade out the sound.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "when",
                    "description": "Time (in seconds) at which the Envelope will release.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 145,
            "description": "Initialize as a classic four-segment ADSR (Attack, Decay, Sustain, Release) envelope.",
            "itemtype": "method",
            "name": "initADSR",
            "params": [
                {
                    "name": "options",
                    "description": "Values that can be passed in to change the shape of the ADSR Envelope.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "useSustain",
                            "description": "If true, hold the sustain end val indefinitely until stop() is called.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "attackDur",
                            "description": "Attack Duration (s)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.01"
                        },
                        {
                            "name": "decayDur",
                            "description": "Decay Duration (s)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.01"
                        },
                        {
                            "name": "releaseDur",
                            "description": "Release Duration (s)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.01"
                        },
                        {
                            "name": "sustainVal",
                            "description": "Sustain Level (s)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        }
                    ]
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/Envelope.js",
            "line": 176,
            "description": "Resets all flags and counters to begin a new envelope traversal.",
            "itemtype": "method",
            "name": "reinit",
            "params": [
                {
                    "name": "hard",
                    "description": "If true, do 'hard' reinit, otherwise attempt to smoothly continue current envelope value.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "when",
                    "description": "Time (in seconds) at which the Envelope will reinit.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "Envelope",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 32,
            "description": "Initial value for the value attribute.",
            "itemtype": "property",
            "name": "defaultValue",
            "type": "Number/Boolean",
            "default": "0",
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 41,
            "description": "Maximum value which the value attribute can be set to.",
            "itemtype": "property",
            "name": "maxValue",
            "type": "Number/Boolean",
            "default": "0",
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 51,
            "description": "Minimum value which the value attribute can be set to.",
            "itemtype": "property",
            "name": "minValue",
            "type": "Number/Boolean",
            "default": "0",
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 61,
            "description": "Name of the Parameter.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "\"\"",
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 71,
            "description": "The parameter's value. This attribute is initialized to the defaultValue. If value is set during a time when there are any automation events scheduled then it will be ignored and no exception will be thrown.",
            "itemtype": "property",
            "name": "value",
            "type": "Number/Boolean",
            "default": "0",
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 170,
            "description": "Schedules a parameter value change at the given time.",
            "itemtype": "method",
            "name": "setValueAtTime",
            "params": [
                {
                    "name": "value",
                    "description": "The value parameter is the value the parameter will change to at the given time.",
                    "type": "Number"
                },
                {
                    "name": "startTime",
                    "description": "The startTime parameter is the time in the same time coordinate system as AudioContext.currentTime.",
                    "type": "Number"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 201,
            "description": "Start exponentially approaching the target value at the given time with a rate having the given time constant.\n\nDuring the time interval: T0 <= t < T1, where T0 is the startTime parameter and T1 represents the time of the event following this event (or infinity if there are no following events):\n    v(t) = V1 + (V0 - V1) * exp(-(t - T0) / timeConstant)",
            "itemtype": "method",
            "name": "setTargetAtTime",
            "params": [
                {
                    "name": "target",
                    "description": "The target parameter is the value the parameter will start changing to at the given time.",
                    "type": "Number"
                },
                {
                    "name": "startTime",
                    "description": "The startTime parameter is the time in the same time coordinate system as AudioContext.currentTime.",
                    "type": "Number"
                },
                {
                    "name": "timeConstant",
                    "description": "The timeConstant parameter is the time-constant value of first-order filter (exponential) approach to the target value. The larger this value is, the slower the transition will be.",
                    "type": "Number"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 240,
            "description": "Sets an array of arbitrary parameter values starting at the given time for the given duration. The number of values will be scaled to fit into the desired duration.\n\nDuring the time interval: startTime <= t < startTime + duration, values will be calculated:\n\n  v(t) = values[N * (t - startTime) / duration], where N is the length of the values array.",
            "itemtype": "method",
            "name": "setValueCurveAtTime",
            "params": [
                {
                    "name": "values",
                    "description": "The values parameter is a Float32Array representing a parameter value curve. These values will apply starting at the given time and lasting for the given duration.",
                    "type": "Float32Array"
                },
                {
                    "name": "startTime",
                    "description": "The startTime parameter is the time in the same time coordinate system as AudioContext.currentTime.",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The duration parameter is the amount of time in seconds (after the startTime parameter) where values will be calculated according to the values parameter.",
                    "type": "Number"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 282,
            "description": "Schedules an exponential continuous change in parameter value from the previous scheduled parameter value to the given value.\n\nv(t) = V0 * (V1 / V0) ^ ((t - T0) / (T1 - T0))",
            "itemtype": "method",
            "name": "exponentialRampToValueAtTime",
            "params": [
                {
                    "name": "value",
                    "description": "The value parameter is the value the parameter will exponentially ramp to at the given time.",
                    "type": "Number"
                },
                {
                    "name": "endTime",
                    "description": "The endTime parameter is the time in the same time coordinate system as AudioContext.currentTime.",
                    "type": "Number"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 320,
            "description": "Schedules a linear continuous change in parameter value from the previous scheduled parameter value to the given value.",
            "itemtype": "method",
            "name": "linearRampToValueAtTime",
            "params": [
                {
                    "name": "value",
                    "description": "The value parameter is the value the parameter will exponentially ramp to at the given time.",
                    "type": "Float32Array"
                },
                {
                    "name": "endTime",
                    "description": "The endTime parameter is the time in the same time coordinate system as AudioContext.currentTime.",
                    "type": "Number"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 353,
            "description": "Schedules a linear continuous change in parameter value from the previous scheduled parameter value to the given value.",
            "itemtype": "method",
            "name": "cancelScheduledValues",
            "params": [
                {
                    "name": "startTime",
                    "description": "The startTime parameter is the starting time at and after which any previously scheduled parameter changes will be cancelled.",
                    "type": "Number"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        },
        {
            "file": "src/lib/temp/SPAudioParam.js",
            "line": 374,
            "description": "Static helper method to create Psuedo parameters which are not connected to\n       any WebAudio AudioParams.",
            "itemtype": "method",
            "name": "createPsuedoParam",
            "static": 1,
            "return": {
                "description": "SPAudioParam"
            },
            "params": [
                {
                    "name": "name",
                    "description": "The name of the parameter..",
                    "type": "String"
                },
                {
                    "name": "minValue",
                    "description": "The minimum value of the parameter.",
                    "type": "Number"
                },
                {
                    "name": "maxValue",
                    "description": "The maximum value of the parameter.",
                    "type": "Number"
                },
                {
                    "name": "defaultValue",
                    "description": "The default and starting value of the parameter.",
                    "type": "Number"
                },
                {
                    "name": "audioContext",
                    "description": "An audiocontext in which this model exists.",
                    "type": "AudioContext"
                }
            ],
            "class": "SPAudioParam",
            "module": "Core"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Activity.js:154"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Activity.js:154"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Activity.js:165"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Activity.js:165"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Activity.js:176"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Activity.js:176"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Activity.js:187"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Activity.js:187"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Activity.js:198"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Activity.js:198"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Activity.js:209"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Activity.js:209"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Extender.js:138"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Extender.js:138"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Extender.js:149"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Extender.js:149"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Extender.js:160"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Extender.js:160"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Looper.js:146"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Looper.js:146"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Looper.js:157"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Looper.js:157"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Looper.js:168"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Looper.js:168"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Looper.js:179"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Looper.js:179"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Looper.js:190"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Looper.js:190"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Looper.js:202"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Looper.js:202"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/MultiTrigger.js:150"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/MultiTrigger.js:150"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/MultiTrigger.js:161"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/MultiTrigger.js:161"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/MultiTrigger.js:172"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/MultiTrigger.js:172"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/MultiTrigger.js:183"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/MultiTrigger.js:183"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/MultiTrigger.js:193"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/MultiTrigger.js:193"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Scrubber.js:287"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Scrubber.js:287"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Scrubber.js:298"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Scrubber.js:298"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Scrubber.js:309"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Scrubber.js:309"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Trigger.js:64"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Trigger.js:64"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Trigger.js:75"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Trigger.js:75"
        },
        {
            "message": "unknown tag: minvalue",
            "line": " src/lib/models/Trigger.js:86"
        },
        {
            "message": "unknown tag: maxvalue",
            "line": " src/lib/models/Trigger.js:86"
        },
        {
            "message": "Missing item type\n/**\n * @module Core",
            "line": " src/lib/temp/BaseSound.js:1"
        }
    ]
}